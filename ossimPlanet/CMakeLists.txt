PROJECT(ossimPlanet)

SET(CMAKE_DEBUG_POSTFIX "d")

#INCLUDE(OssimVersion)

#INCLUDE(OssimUtilities)

#INCLUDE(OssimCommonVariables)


OPTION(OSSIMPLANET_ENABLE_EPHEMERIS "Set to ON enable ephemeris support if GPSTK is found.  Use OFF to not enable ephemeris." ON)



IF(NOT APPLE)
  
  cmake_minimum_required(VERSION 2.6)

ELSE(NOT APPLE)
  
  cmake_minimum_required(VERSION 2.8)

ENDIF(NOT APPLE)




#find_package(ossimPredator)

#find_package(GPSTK)

#find_package(OSG)

#find_package(FFmpeg)



################################################## BUILD THE LIBRARY #######################################

SET(LIB_NAME ossimPlanet)




IF(OSSIMPREDATOR_FOUND AND BUILD_OSSIMPREDATOR)
   
  INCLUDE_DIRECTORIES(${OSSIMPREDATOR_INCLUDE_DIR})
   
  ADD_DEFINITIONS("-DOSSIMPLANET_ENABLE_PREDATOR")
   
  INCLUDE_DIRECTORIES(${FFMPEG_INCLUDE_DIRS})

ELSE(OSSIMPREDATOR_FOUND AND BUILD_OSSIMPREDATOR)
   
  MESSAGE(STATUS "Disabling Predator support in Planet")
   
  SET(OSSIMPREDATOR_LIBRARY "")
   
  SET(OSSIMPREDATOR_LIBRARIES "")
   
  SET(OSSIMPREDATOR_INCLUDE_DIR "")
  
  SET(FFMPEG_LIBRARIES "")
   
  SET(FFMPEG_LIBRARY "")

ENDIF(OSSIMPREDATOR_FOUND AND BUILD_OSSIMPREDATOR)





IF(GPSTK_FOUND AND OSSIMPLANET_ENABLE_EPHEMERIS)
   
  MESSAGE(STATUS "GPSTK_LIBRARY               = ${GPSTK_LIBRARY}")
   
  MESSAGE(STATUS "GPSTK_INCLUDE_DIR           = ${GPSTK_INCLUDE_DIR}")
   
  ADD_DEFINITIONS("-DOSSIMPLANET_ENABLE_EPHEMERIS")
   
  INCLUDE_DIRECTORIES(${GPSTK_INCLUDE_DIR})

ELSE(GPSTK_FOUND AND OSSIMPLANET_ENABLE_EPHEMERIS)
   
  SET(GPSTK_LIBRARY "")

ENDIF(GPSTK_FOUND AND OSSIMPLANET_ENABLE_EPHEMERIS)




INCLUDE_DIRECTORIES(${${PROJECT_NAME}_SOURCE_DIR}/include
                    
                    ${OSSIM_INCLUDE_DIR}

                    ${OSG_INCLUDE_DIR}

                    ${JPEG_INC}

		    ${WMS_INCLUDE_DIR}

		    ${WMS_INCLUDE_DIR}

                    ${OPEN_THREAD_INC}
                    ${CURL_INCLUDE_DIR}

                    ${ZLIB_INCLUDE_DIR})





LINK_DIRECTORIES(${CURL_LINK_DIR}

                 ${OSG_LINK_DIR}

		 ${OSG_3RDPART_LINK_DIR}

		 ${GEOTIFF_LINK_DIR}
                 ${EXPAT_LINK_DIR}
                 ${TIFF_LINK_DIR}
                 ${ZLIB_LINK_DIR})





FILE(GLOB OSSIMPLANET_SRCS RELATIVE_PATH ${CMAKE_CURRENT_SOURCE_DIR} "${CMAKE_CURRENT_SOURCE_DIR}/src/ossimPlanet/*.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/src/ossimPlanet/*.c")

FILE(GLOB OSSIMPLANET_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/include/ossimPlanet/*.h")




IF(NOT BUILD_OSSIMPREDATOR)
  
  LIST(REMOVE_ITEM OSSIMPLANET_SRCS "${CMAKE_CURRENT_SOURCE_DIR}/src/ossimPlanet/ossimPlanetPredatorVideoLayerNode.cpp")
   
  LIST(REMOVE_ITEM OSSIMPLANET_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/include/ossimPlanet/ossimPlanetPredatorVideoLayerNode.h")

ENDIF()



IF(NOT WIN32)
   
  LIST(REMOVE_ITEM OSSIMPLANET_SRCS "${CMAKE_CURRENT_SOURCE_DIR}/src/ossimPlanet/iowin32.c")

ELSE(NOT WIN32)
   
  IF(MSVC)
      
     LIST(APPEND ${LIB_NAME}_EXTRA_LIBS "ws2_32" "winmm")
   
  ENDIF(MSVC)

ENDIF(NOT WIN32)






SET (LIB_TYPE SHARED)


ADD_DEFINITIONS(-D_AFXEXT)
ADD_DEFINITIONS(-D_AFXDLL)
ADD_DEFINITIONS(-DNOMINMAX)
ADD_DEFINITIONS(-DOSSIMPLANET_LIBRARY)



SET (CMAKE_MFC_FLAG 0)




ADD_LIBRARY(${LIB_NAME}
            ${LIB_TYPE}
            ${OSSIMPLANET_SRCS})




set_target_properties (${PROJECT_NAME} PROPERTIES COMPILE_FLAGS "/MP" )
set_target_properties (${PROJECT_NAME} PROPERTIES LINK_FLAGS "/FORCE:MULTIPLE" )
set_target_properties (${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY  ${OUTPUT_BINDIR})
set_target_properties (${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG  ${OUTPUT_BINDIR})
set_target_properties (${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE   ${OUTPUT_BINDIR})
set_target_properties (${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY  ${OUTPUT_BINDIR})
set_target_properties (${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG  ${OUTPUT_BINDIR})
set_target_properties (${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE   ${OUTPUT_BINDIR})



TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${CURL_LIBRARIES} ${OSG_LIBRARIES} ossimcore  opengl32  wms  ${ZLIB_LIBRARY}  ${${LIB_NAME}_EXTRA_LIBS})

